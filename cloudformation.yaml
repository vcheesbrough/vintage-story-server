AWSTemplateFormatVersion: "2010-09-09"
#/var/log/cfn-init-cmd.log: cfn-init and command output with timestamps
#/var/log/cfn-init.log: cfn-init and command output
#/var/log/cloud-init.log: cloud init logs pertaining to running the commands in user-data
#/var/log/cloud-init-output.log: output from the user-data commands themselves

Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  DuckdnsDomain:
    Type: String
  DuckdnsToken:
    Type: String
  VintageStoryDownloadUrl:
    Type: String
    Default: https://cdn.vintagestory.at/gamefiles/stable/vs_server_1.14.8.tar.gz
  VintageStoryServerPassword:
    Type: String

Resources: 
  GameSavesBackupBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - NoncurrentVersionExpirationInDays: 7
            Status: Enabled

#  GameSavesBackupBucketPolicy:
#    Type: AWS::S3::BucketPolicy
#    Properties:
#      Bucket: !Ref GameSavesBackupBucket
#      PolicyDocument:
#        Statement:
#          - Action:
#              - 's3:*'
#            Effect: Allow
#            Resource: !Join
#              - ''
#              - - 'arn:aws:s3:::'
#                - !Ref GameSavesBackupBucket
#                - /*
#            Principal: '*'
#            Condition:
#              StringLike:
#                'aws:Referer':
#                  - 'http://www.example.com/*'
#                  - 'http://example.net/*'
  GameServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  GameServerRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: s3
      Roles:
      - Ref: GameServerRole
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - s3:*
          Resource: "*"

  GameServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref GameServerRole

  GameServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t3.small
      KeyName: vincent@ryzen
      SecurityGroups:
      - Ref: GameServerSecurityGroup
      IamInstanceProfile: !Ref GameServerInstanceProfile
      UserData:
        Fn::Base64: !Sub |
           #!/bin/bash -xe
           sudo adduser --shell /bin/bash duckdns
           sudo adduser --shell /bin/bash vintagestory
           yum update -y aws-cfn-bootstrap
           /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource GameServer --region ${AWS::Region}
           sudo yum install -y yum-utils
           sudo rpm --import "http://keyserver.ubuntu.com/pks/lookup?op=get&search=0x3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF"
           sudo yum-config-manager --add-repo http://download.mono-project.com/repo/centos/
           sudo yum install -y mono-devel
           sudo mkdir /opt/vintagestoryserver
           cd /opt/vintagestoryserver
           sudo curl https://cdn.vintagestory.at/gamefiles/stable/vs_server_1.14.8.tar.gz | sudo tar -xzf -
           sudo chown -R vintagestory:vintagestory /opt/vintagestoryserver
           (
              sleep 60
              echo /op FifthColumnist
              echo /op n33712
              echo /serverconfig password ${VintageStoryServerPassword}
              echo /serverconfig name ${DuckdnsDomain}
              echo /serverconfig advertise 1
              echo /worldConfig propickNodeSearchRadius 6
              sleep 30
              echo /stop
           )|sudo -u vintagestory -- sh -c 'cd /opt/vintagestoryserver;/usr/bin/mono VintagestoryServer.exe --dataPath /home/vintagestory/game-data'
           sudo systemctl restart rsyslog.service
           sudo systemctl enable vintagestoryserver.service
           sudo systemctl start vintagestoryserver.service
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}

    Metadata: 
      AWS::CloudFormation::Init:
        config:
          packages:
            yum: 
              htop: []
          files:
            /home/duckdns/duck.sh:
              content: !Sub |
                #!/bin/bash
                current=""
                while true; do
                  latest=`ec2-metadata --public-ipv4`
                  echo "public-ipv4=$latest"
                  if [ "$current" == "$latest" ]
                  then
                    echo "ip not changed"
                  else
                    echo "ip has changed - updating"
                    current=$latest
                    echo url="https://www.duckdns.org/update?domains=${DuckdnsDomain}&token=${DuckdnsToken}&ip=" | curl -k -o ~/duck.log -K -
                  fi
                  sleep 5m
                done       
              mode: "000700"
              owner: "duckdns"
              group: "duckdns"
            /usr/lib/systemd/system/duckdns.service:
              content: !Sub |
                [Unit]
                Description=Duckdns updater
                After=network.target
                
                [Service]
                WorkingDirectory=/home/duckdns
                ExecStart=/home/duckdns/duck.sh
                Restart=always
                RestartSec=30
                StandardOutput=syslog
                StandardError=syslog
                SyslogIdentifier=duck.sh
                User=duckdns
                Group=duckdns
                
                [Install]
                WantedBy=multi-user.target
              mode: "000644"
              owner: "duckdns"
              group: "duckdns"
            /usr/lib/systemd/system/vintagestoryserver.service:
              content: !Sub |
                [Unit]
                Description=Vintage Story Server Unit
                After=network.target
                
                [Service]
                WorkingDirectory=/opt/vintagestoryserver
                ExecStart=/usr/bin/mono VintagestoryServer.exe --dataPath /home/vintagestory/game-data
                ExecStopPost=/usr/bin/sh -c 'cd /home/vintagestory/game-data; tar -cf - *|aws s3 cp - s3://${GameSavesBackupBucket}/${DuckdnsDomain}.tar.gz'
                Restart=always
                RestartSec=30
                StandardOutput=syslog
                StandardError=syslog
                SyslogIdentifier=VSSRV
                User=vintagestory
                Group=vintagestory
                
                [Install]
                WantedBy=multi-user.target                
              mode: "000644"
              owner: "vintagestory"
              group: "vintagestory"
            /etc/rsyslog.d/vintagestoryserver.conf:
              content: !Sub |
                if $programname == 'VSSRV' then {
                    if($msg contains "Chat") then {
                        action(type="omfile" dirCreateMode="0755" FileCreateMode="0644" File="/var/log/vintagestory-server/chat.log")
                    } else if($msg contains "verlie√ü") then {
                        action(type="omfile" dirCreateMode="0755" FileCreateMode="0644" File="/var/log/vintagestory-server/login.log")
                    } else if($msg contains "join") then {
                        action(type="omfile" dirCreateMode="0755" FileCreateMode="0644" File="/var/log/vintagestory-server/login.log")
                    } else if($msg contains "Server Warning") then {
                        action(type="omfile" dirCreateMode="0755" FileCreateMode="0644" File="/var/log/vintagestory-server/warn.log")
                    } else if($msg contains "Server Notification") then {
                        action(type="omfile" dirCreateMode="0755" FileCreateMode="0644" File="/var/log/vintagestory-server/info.log")
                    } else if($msg contains "Server Debug") then {
                        action(type="omfile" dirCreateMode="0755" FileCreateMode="0644" File="/var/log/vintagestory-server/debug.log")
                    } else if($msg contains "Server Event") then {
                        action(type="omfile" dirCreateMode="0755" FileCreateMode="0644" File="/var/log/vintagestory-server/event.log")
                    } else {
                        action(type="omfile" dirCreateMode="0755" FileCreateMode="0644" File="/var/log/vintagestory-server/other.log")
                    }
                }
                # Discard 
                if $programname == 'VSSRV' then ~              
              mode: "000644"
              owner: "vintagestory"
              group: "vintagestory"
            /home/vintagestory/.ssh/authorized_keys:
              content: !Sub |
                ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDjDkDH1Yk1e+0eM0TbGKkpjbq9o8WL5sEeMQ44iRrNevvmzc0/6+OTl3RNHLlXzlwbhY5EOpxSIWs57vigqdOl2blx7Ovi1DsXGkooXSSfld0NrTCo4lqWl6u37FIAbc4ijH6a4Fh0Lz9MNlrbcyApyorGye47cvJ6pS4A93Gbo22CY27Rz/VYPjJA3bNNu14/2No4lp44cichIoJWqX5nuSZto1pp+77NT9EjWto/TWAsb5I+mFhGoK2Hs+c6QLQGhFsM8RMkA5eSbAAUk+rQJfKJVJGXOC0VQA045Xu2hnAhDEyq0Awt6NkV5R+C6ZmlydPTwwbeJ0Uub+l1LyzP vince@Ryzen
              mode: "000700"
              owner: "vintagestory"
              group: "vintagestory"
          commands:
            start-duckdns:
              command: "sudo systemctl enable duckdns.service;sudo systemctl start duckdns.service"

  GameServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable Vintage Story Server port and ssh only for IP4/6"
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: '42420'
        IpProtocol: tcp
        ToPort: '42420'
      - CidrIpv6: ::/0
        FromPort: '42420'
        IpProtocol: tcp
        ToPort: '42420'
      - CidrIp: 0.0.0.0/0
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
      - CidrIpv6: ::/0
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'      
Outputs:
  PublicIp:
    Description: GameServer Public IP
    Value: !GetAtt GameServer.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-PublicIp"
